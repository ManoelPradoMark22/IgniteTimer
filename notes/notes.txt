documentação de estilos/cores/components da Rocketseat
https://andromeda.rocketseat.dev/


________________

ESLINT:
1º:
npm i @rocketseat/eslint-config -D

2º:
criar na raiz um arquivo: .eslintrc.json e o seu conteúdo deve ser:
{
  "extends": "@rocketseat/eslint-config/react"
}

3º (checar se há erros de lint):
npx eslint src --ext .ts,.tsx

Bônus (corrigir o lint de todos os arquivos automaticamente):
npx eslint src --ext .ts,.tsx --fix

O ESLint permite que a gente configure diversas regras para padronizar a organização do nosso código.

Isso vai desde como deve ser o comportamento de quebras de linha, ponto-e-vírgula, vírgulas e até mesmo regras para nomeação de variáveis ou 
plugins que ajudam a gente à não esquecer algumas regras do React: https://www.npmjs.com/package/eslint-plugin-react-hooks

Nessa aula, veremos como configurar o ESLint utilizando o plugin de padrões que utilizamos na Rocketseat, sem a necessidade de fazer uma série de configurações manuais.

Caso queira ver as configurações utilizadas nesse plugin, você pode acessar o repositório oficial com o código dessas configurações para o React: 
https://github.com/Rocketseat/eslint-config-rocketseat/blob/main/react.js

O ESLint possui uma enorme lista de rules (regras) que você pode configurar, e todas estão disponíveis através desse link da documentação oficial: 
https://eslint.org/docs/rules/

Caso queira ver mais sobre como configurar o ESLint manualmente, você pode ver o guia de Getting Started do ESLint disponível no seguinte link: 
https://eslint.org/docs/user-guide/getting-started

________________

React router DOM: como configurar a navegação da nossa aplicação para que ela tenha múltiplas páginas.

Para isso, vamos instalar a biblioteca React Router DOM: https://reactrouter.com/
e iremos estruturar a navegação da nossa aplicação.

________________

Context Providers -> Como o ThemeProvider e BrowserRouter , sao components q nao teem efeito visual, mas produzem o contexto para os compoenents dentro deles

use the BrowserRouter (context provider) to englobe the Router component

________________

inherit -> faz herdar aquela propriedade do pai

export const FormContainer = styled.div`
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  color: ${(props) => props.theme['gray-100']};
  font-size: 1.125rem;
  font-weight: bold;
  flex-wrap: wrap;
`
const BaseInput = styled.input`
  font-size: inherit;  /*  /HERE - herdando do FormContainer*/
  background: transparent;
  height: 2.5rem;
  border: 0;
  bor


________________

temos varios elementos em colunas. o border-collapsse: collapse faz com q exista apenas uma borda entre os elementos (para qnd aplicar a borda, nao ficar uma na esquerda e uma na direita, ai fica 1 apenas p ambas)

border-collapse: collapse;

________________


const STATUS_COLOR = {
  yellow: 'yellow-500',
  green: 'green-500',
  red: 'red-500',
}
esse é lido assim pelo TS:
const STATUS_COLOR = {
  yellow: string,
  green: string,
  red: string
}


const STATUS_COLOR = {
  yellow: 'yellow-500',
  green: 'green-500',
  red: 'red-500',
} as const
esse já é lido pelos valores de cada chave do objeto!!! como constante!!!

________________

const STATUS_COLOR = {
  yellow: 'yellow-500',
  green: 'green-500',
  red: 'red-500',
} as const

interface StatusProps {
  statusColor: keyof typeof STATUS_COLOR
}
usa o: keyof typeof  pq estamos no arquivo TS !!!

________________

 - controlled components
 quando mantemos em tempo real o estado/informação (input do usuário) que o usuário insere na aplicação, dentro do estado
 traz muita fluidez para a aplicação no sentido de termos praticidade ao podermos utilzar o estado mais atualizado
 maaaasssss.... sempre que atualizamos o estado, causamos uma nova renderização (recalcula todo o conteúdo do componente e estado) - se tivermos uma aplicação muito complexa com mtos componentes aninhados etc, pode gerar gargalo (nem sempre, mas neses casos complexos pode gerar)

- uncontrolled components 
 a gente busca a info do valor do input somente quando precisarmos dela
 não monitora o valor digitado em tempo real
 casos de uso -> dashboards complexos com mtos components

 ________________

 lib: react-hook-form
 consegue trabalhar com os compoenents, tanto de uma forma controlled quanto tb de uma forma uncontrolled
   -> const { register, handleSubmit } = useForm()
   useForm() -> como se estivessemos criando um novo formulario na nossa aplicação
   register -> quais sao os campos q vamos ter no nosso formulário?

   {...register('task')}
   {...register('minutesAmount', { valueAsNumber: true })}

   function register(name: string) {
    return {
      onChange: () => void,
      onBlur: () => void,
      onFocus: () => void,
      .....
    }
   }

   -------
  //handleSubmit
  const { register, handleSubmit } = useForm()

  function handleCreateNewCycle(data) { //nossa funcao
    console.log(data)
  }

  return (
    <HomeContainer>
      <form onSubmit={handleSubmit(handleCreateNewCycle)} action="">
        <FormContainer>
        ......
   -------
  
  //watch
  export function Home() {
  const { register, handleSubmit, watch } = useForm()

  function handleCreateNewCycle(data) {
    console.log(data)
  }

  const task = watch('task') //component de input q criamos com o register
  const isSubmitDisabled = !task

  ________________

  bibliotecas de validação
  yup, joi, zod
  //zod
   - para integrar a lib de validacao com o react hook form, devemos instalar:
   npm i @hookform/resolvers
   e usar: import { zodResolver } from '@hookform/resolvers/zod'

   -----

   import * as zod from 'zod'
   usamos essa sintaxe quando a biblioteca nao tem um export default

   -----

   const { register, handleSubmit, watch, formState } = useForm({
    resolver: zodResolver(newCycleFormValidationSchema),
  })

  console.log(formState.errors)

  --------------

  inferindo os tipos do formulario com o Zod
  https://github.com/colinhacks/zod?tab=readme-ov-file#basic-usage

  const newCycleFormValidationSchema = zod.object({
  task: zod.string().min(1, 'Enter the task'),
  minutesAmount: zod
    .number()
    .min(5, 'The cycle must be at least 5 minutes')
    .max(60, 'The cycle must be a maximum of 60 minutes'),
})

// para criar manualmente
// interface NewCycleFormatData {
//   task: string
//   minutesAmount: number
// }

// para inferir automaticamente
type NewCycleFormatData = zod.infer<typeof newCycleFormValidationSchema>

export function Home() {
  const { register, handleSubmit, watch } = useForm<NewCycleFormatData>({
    resolver: zodResolver(newCycleFormValidationSchema),
    defaultValues: {
      task: '',
      minutesAmount: 0,
    },
  })

  function handleCreateNewCycle(data: NewCycleFormatData) {
    console.log(data)
  }

________________

//reset()

  const { register, handleSubmit, watch, reset } = useForm<NewCycleFormatData>({
    resolver: zodResolver(newCycleFormValidationSchema),
    defaultValues: {
      task: '',
      minutesAmount: 0,
    },
  })

  function handleCreateNewCycle(data: NewCycleFormatData) {
    console.log(data)
    reset()
  }
    -> Reset vai voltar para os valores default que colocamos no useForm!!!